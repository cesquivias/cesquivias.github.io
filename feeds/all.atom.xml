<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Cristian Esquivias: Cristian Esquivias</title>
 <link rel="self" href="http://cesquivias.github.io/feeds/all.atom.xml" />
 <link href="http://cesquivias.github.io/index.html" />
 <id>urn:http-cesquivias-github-io:-index-html</id>
 <updated>2015-01-08T21:49:36Z</updated>
 <entry>
  <title type="text">Writing a Language in Truffle. Part 3: Making my Language (Much) Faster</title>
  <link rel="alternate" href="http://cesquivias.github.io/blog/2015/01/08/writing-a-language-in-truffle-part-3-making-my-language-much-faster/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-cesquivias-github-io:-blog-2015-01-08-writing-a-language-in-truffle-part-3-making-my-language-much-faster</id>
  <published>2015-01-08T21:49:36Z</published>
  <updated>2015-01-08T21:49:36Z</updated>
  <author>
   <name>Cristian Esquivias</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;After the last post, we have a working interpreter in Truffle (yay!), but the results weren&amp;rsquo;t very exciting. Running our fibonacci benchmark we got a paltry 6.3 seconds execution time using TruffleMumbler. Perhaps we can do better.&lt;/p&gt;

&lt;p&gt;With help from a couple of Truffle veterans, I was able to speed up my interpreter&amp;rsquo;s speed. With a couple of key improvements and warming up the VM I was able to get the execution time down to 0.1 seconds. A 63x jump!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go through the changes I made to get such an improvement.&lt;/p&gt;
&lt;!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc/generate-toc again--&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="#warming-up-graal"&gt;Warming Up Graal&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#improving-variable-lookup"&gt;Improving Variable Lookup&lt;/a&gt;
  &lt;ul&gt;
   &lt;li&gt;&lt;a href="#remember-scope-depth"&gt;Remember Scope Depth&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href="#direct-lookup-to-lexical-scope"&gt;Direct Lookup to Lexical Scope&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#making-function-calls-faster"&gt;Making Function Calls Faster&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;!-- markdown-toc end--&gt;&lt;a href="http://cesquivias.github.io/blog/2015/01/08/writing-a-language-in-truffle-part-3-making-my-language-much-faster/?utm_source=all&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Writing a Language in Truffle. Part 2: Using Truffle and Graal</title>
  <link rel="alternate" href="http://cesquivias.github.io/blog/2014/12/02/writing-a-language-in-truffle-part-2-using-truffle-and-graal/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-cesquivias-github-io:-blog-2014-12-02-writing-a-language-in-truffle-part-2-using-truffle-and-graal</id>
  <published>2014-12-02T23:21:26Z</published>
  <updated>2014-12-02T23:21:26Z</updated>
  <author>
   <name>Cristian Esquivias</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;I was hoping to get this next installment out earlier. Sorry for the delay. Now after Thanksgiving, a vacation and a bout of the flu I&amp;rsquo;m ready to get back into it.&lt;/p&gt;

&lt;p&gt;Last time I created a simple interpreter for a lisp language I called Mumbler. This time around let&amp;rsquo;s actually use Truffle and Graal to run our interpreter. We&amp;rsquo;ll start off with the minimal amount of Truffle we need to get our interpreter to compile and run. If the bare-bones interpreter isn&amp;rsquo;t fast enough we&amp;rsquo;ll investigate more Truffle hooks to speed things up.&lt;/p&gt;&lt;a href="http://cesquivias.github.io/blog/2014/12/02/writing-a-language-in-truffle-part-2-using-truffle-and-graal/?utm_source=all&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Writing a Language in Truffle. Part 1: A Simple, Slow Interpreter</title>
  <link rel="alternate" href="http://cesquivias.github.io/blog/2014/10/13/writing-a-language-in-truffle-part-1-a-simple-slow-interpreter/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-cesquivias-github-io:-blog-2014-10-13-writing-a-language-in-truffle-part-1-a-simple-slow-interpreter</id>
  <published>2014-10-13T23:25:17Z</published>
  <updated>2014-10-13T23:25:17Z</updated>
  <author>
   <name>Cristian Esquivias</name></author>
  <content type="html">&lt;html&gt;
&lt;p class="subtitle"&gt;How hard is it to write a simple, fast interpreter? Let's find out.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s fun writing little language interpreters in Python. You can get a fully functional interpreter in about an hour but of course my toy interpreters are just that: a toy. Writing a lisp interpreter on top of an already slow language like Python will not win any speed competitions. You may get away with writing small Domain Specific Languages (DSLs) as an interpreter, but you can forget about any general programming language. The performance hit makes it untenable unless you write it in some lower level language like C; who wants to do that? If you want to target higher level virtual machines like the JVM you&amp;rsquo;re left with writing a compiler that takes your code and produces JVM bytecode. How about writing a compiler that targets Javascript? Another not-so-fun alternative.&lt;/p&gt;

&lt;p&gt;Thankfully, a new solution is here. You can write your interpreter in a VM that is designed to optimize your interpreter with all that wonderful JIT compilation magic. Oracle labs has &lt;a href="http://www.oracle.com/technetwork/oracle-labs/program-languages/overview/index-2301583.html"&gt;released its own VM&lt;/a&gt; that hopes to make writing language interpreters both easy and fast. It can also leverage the huge ecosystem of the Java Virtual Machine (JVM). This modified JVM contains a new Just-In-Time (JIT) compiler that can speed up interpreters like my little lisp to near-Java speeds. The new JIT compiler is called Graal. To take advantage of Graal&amp;rsquo;s JIT-y goodness you use the Truffle library to annotate your interpreter and give Graal some hints on invariants and type information. For this integration effort you get significant speedups in your interpreter without having to resort to writing a bytecode compiler plus you have the full power of Java at your disposal.&lt;/p&gt;&lt;a href="http://cesquivias.github.io/blog/2014/10/13/writing-a-language-in-truffle-part-1-a-simple-slow-interpreter/?utm_source=all&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;&lt;/html&gt;</content></entry></feed>